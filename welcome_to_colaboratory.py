# -*- coding: utf-8 -*-
"""Welcome to Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import numpy as np
df = pd.read_csv("CourseRecommendation.csv")
df.rename(columns = {'AssignmentOneCurrentScore':'AssignmentOneAverage'}, inplace = True)
df.rename(columns = {'AssignmentTwoCurrentScore':'AssignmentTwoAverage'}, inplace = True)
df.rename(columns = {'AssignmentThreeCurrentScore':'AssignmentThreeAverage'}, inplace = True)
df.head()

dicti = {'Student ID':['-123q'],
        'AssignmentOneAverage':[1],
        'AssignmentOneAttempt':[76],
        'AssignmentTwoAverage':[42],
        'AssignmentTwoAttempt':[2],
        'AssignmentThreeAverage':[76],
        'AssignmentThreeAttempt':[2],
        'Gender':[1],
        'Course':["rgreereh"],
        'Rating':[7]
       }
class1 = pd.DataFrame(dicti)
class2 = pd.DataFrame(dicti)
class3 = pd.DataFrame(dicti)

for i in range (0,15000):
  t=df["AssignmentOneAverage"][i]*df["AssignmentOneAttempt"][i]	+df["AssignmentTwoAverage"][i]*df["AssignmentTwoAttempt"][i]	+df["AssignmentThreeAverage"][i]*df["AssignmentThreeAttempt"][i]
  s=df["AssignmentOneAttempt"][i]+df["AssignmentTwoAttempt"][i]	+df["AssignmentThreeAttempt"][i]	
  q=t//s
  if(q>=0 and q<=40):
    class1.loc[len(class1.index)]=df.loc[i]
  elif(q>=41 and q<=70):
    class2.loc[len(class2.index)]=df.loc[i]
  else:
    class3.loc[len(class3.index)]=df.loc[i]

class2 = class2.drop([0])
class1 = class1.drop([0])
print(class2)

course_ratingCount = (class1.
     groupby(by = ['Course'])['Rating'].
     count().
     reset_index().
     rename(columns = {'Rating': 'totalRatingCount'})
     [['Course', 'totalRatingCount']]
    )
course_ratingCount.tail()

rating_with_totalRatingCount = class1.merge(course_ratingCount, left_on = 'Course', right_on = 'Course', how = 'left')
rating_with_totalRatingCount.head()

popularity_threshold = 5
rating_popular_course= rating_with_totalRatingCount.query('totalRatingCount >= @popularity_threshold')
rating_popular_course.head()

# rating_popular_course.shape

## First lets create a Pivot matrix
mapp={}
course_features_df=rating_popular_course.pivot_table(index='Course',columns='Student ID',values='Rating').fillna(0)
course_features_df.head()
for i in range (0,len(course_features_df)):
  mapp[course_features_df.index[i]]=i

from scipy.sparse import csr_matrix

course_features_df_matrix = csr_matrix(course_features_df.values)

from sklearn.neighbors import NearestNeighbors


model_knn = NearestNeighbors(metric = 'cosine', algorithm = 'brute')
model_knn.fit(course_features_df_matrix)

query_index = np.random.choice(course_features_df.shape[0])
print(query_index)
distances, indices = model_knn.kneighbors(course_features_df.iloc[query_index,:].values.reshape(1, -1), n_neighbors = 6)
course_features_df.iloc[query_index,:].values.reshape(1, -1)

for i in range(0, len(distances.flatten())):
    if i == 0:
        print('Recommendations for {0}:\n'.format(course_features_df.index[query_index]))
    else:
        print('{0}: {1}, with distance of {2}:'.format(i, course_features_df.index[indices.flatten()[i]], distances.flatten()[i]))